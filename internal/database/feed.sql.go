// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNewFeed = `-- name: CreateNewFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id) VALUES ( 
 $1,
 $2,
 $3,
 $4,
 $5,
 $6
)
Returning id, created_at, updated_at, name, url, user_id
`

type CreateNewFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateNewFeed(ctx context.Context, arg CreateNewFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createNewFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedIdByURL = `-- name: GetFeedIdByURL :one
SELECT feeds.id FROM feeds where feeds.url = $1
`

func (q *Queries) GetFeedIdByURL(ctx context.Context, url string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getFeedIdByURL, url)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getFeeeds = `-- name: GetFeeeds :many
SELECT feeds.name, feeds.url, users.name as user_name 
from feeds 
join users 
on feeds.user_id = users.id
`

type GetFeeedsRow struct {
	Name     string
	Url      string
	UserName string
}

func (q *Queries) GetFeeeds(ctx context.Context) ([]GetFeeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeeedsRow
	for rows.Next() {
		var i GetFeeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
